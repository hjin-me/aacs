// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/lunzi/aacs/internal/conf"
	"github.com/lunzi/aacs/internal/data/accounts"
	"github.com/lunzi/aacs/internal/data/db"
	"github.com/lunzi/aacs/internal/data/ident"
	"github.com/lunzi/aacs/internal/data/ident/localp"
	"github.com/lunzi/aacs/internal/data/myotel"
	"github.com/lunzi/aacs/internal/data/pfsession"
	"github.com/lunzi/aacs/internal/data/rbac"
	"github.com/lunzi/aacs/internal/data/thirdparty"
	"github.com/lunzi/aacs/internal/data/wecom"
	"github.com/lunzi/aacs/internal/pages"
	"github.com/lunzi/aacs/internal/server/aacs"
	"github.com/lunzi/aacs/internal/service"
	"github.com/lunzi/aacs/internal/service/auth"
	thirdparty2 "github.com/lunzi/aacs/internal/service/thirdparty"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(contextContext context.Context, server *conf.Server, data *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	bunDB := db.NewPG(data)
	authRepo, err := rbac.NewAuthRepo(data, server, logger)
	if err != nil {
		return nil, nil, err
	}
	thirdPartyRepo := thirdparty.NewThirdPartyRepo(logger, bunDB, authRepo)
	providerIns := localp.NewPgProvider(bunDB, logger)
	openIDSet := ident.NewOpenIdSet(contextContext, bunDB, data, providerIns)
	accountsRepo := accounts.NewAccountsRepo(bunDB, openIDSet)
	identRepo := ident.NewIdentRepo(thirdPartyRepo, accountsRepo, openIDSet, bunDB, server, logger)
	options := pfsession.NewRedisConf(data)
	client := myotel.NewTracerClient(server)
	spanExporter := myotel.NewTracerExporter(contextContext, client)
	pfSession := pfsession.NewPfSession(contextContext, options, spanExporter, logger)
	identificationService := service.NewIdentificationService(identRepo, thirdPartyRepo, pfSession, logger)
	thirdpartyService := thirdparty2.NewThirdPartyService(thirdPartyRepo, authRepo, identRepo, server, logger)
	wecomConf := wecom.NewWeComConf(data)
	weCom := wecom.NewWeCom(wecomConf, logger)
	pageServ := pages.NewPageServ(thirdPartyRepo, identRepo, server, weCom, logger)
	authorizationService := auth.NewAuthorizationService(logger, authRepo)
	accountService := service.NewAccountService(logger, providerIns, identRepo, authRepo, accountsRepo, server)
	httpServer := aacs.NewHTTPServer(server, identificationService, thirdpartyService, pageServ, authorizationService, accountService, identRepo, accountsRepo, thirdPartyRepo, logger)
	grpcServer := aacs.NewGRPCServer(server, identificationService, authorizationService, thirdpartyService, accountService, identRepo, thirdPartyRepo, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
	}, nil
}

func initProvider(contextContext context.Context, server *conf.Server, logger log.Logger) (func(), error) {
	client := myotel.NewMetricClient(server)
	exporter := myotel.NewMetricExporter(contextContext, client)
	otlptraceClient := myotel.NewTracerClient(server)
	spanExporter := myotel.NewTracerExporter(contextContext, otlptraceClient)
	v, err := newOtel(contextContext, server, exporter, spanExporter, logger)
	if err != nil {
		return nil, err
	}
	return v, nil
}
