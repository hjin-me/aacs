// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package biztest is a generated GoMock package.
package biztest

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	biz "github.com/lunzi/aacs/internal/biz"
)

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// AddAdmin mocks base method.
func (m *MockAuthRepo) AddAdmin(sys, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdmin", sys, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAdmin indicates an expected call of AddAdmin.
func (mr *MockAuthRepoMockRecorder) AddAdmin(sys, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdmin", reflect.TypeOf((*MockAuthRepo)(nil).AddAdmin), sys, uid)
}

// AddRoleForUser mocks base method.
func (m *MockAuthRepo) AddRoleForUser(uid, role, sys string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleForUser", uid, role, sys)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoleForUser indicates an expected call of AddRoleForUser.
func (mr *MockAuthRepoMockRecorder) AddRoleForUser(uid, role, sys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleForUser", reflect.TypeOf((*MockAuthRepo)(nil).AddRoleForUser), uid, role, sys)
}

// AddRolePolicy mocks base method.
func (m *MockAuthRepo) AddRolePolicy(sys string, subs []string, obj string, acts []biz.Actions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRolePolicy", sys, subs, obj, acts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRolePolicy indicates an expected call of AddRolePolicy.
func (mr *MockAuthRepoMockRecorder) AddRolePolicy(sys, subs, obj, acts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolePolicy", reflect.TypeOf((*MockAuthRepo)(nil).AddRolePolicy), sys, subs, obj, acts)
}

// AddUserPolicy mocks base method.
func (m *MockAuthRepo) AddUserPolicy(sys string, subs []string, obj string, acts []biz.Actions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserPolicy", sys, subs, obj, acts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserPolicy indicates an expected call of AddUserPolicy.
func (mr *MockAuthRepoMockRecorder) AddUserPolicy(sys, subs, obj, acts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserPolicy", reflect.TypeOf((*MockAuthRepo)(nil).AddUserPolicy), sys, subs, obj, acts)
}

// DeleteRoleForUser mocks base method.
func (m *MockAuthRepo) DeleteRoleForUser(sys, uid, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleForUser", sys, uid, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleForUser indicates an expected call of DeleteRoleForUser.
func (mr *MockAuthRepoMockRecorder) DeleteRoleForUser(sys, uid, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleForUser", reflect.TypeOf((*MockAuthRepo)(nil).DeleteRoleForUser), sys, uid, role)
}

// Enforce mocks base method.
func (m *MockAuthRepo) Enforce(sys, sub, obj string, act biz.Actions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enforce", sys, sub, obj, act)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enforce indicates an expected call of Enforce.
func (mr *MockAuthRepoMockRecorder) Enforce(sys, sub, obj, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enforce", reflect.TypeOf((*MockAuthRepo)(nil).Enforce), sys, sub, obj, act)
}

// GetPermissionsForUser mocks base method.
func (m *MockAuthRepo) GetPermissionsForUser(sys, uid string) []biz.Perm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsForUser", sys, uid)
	ret0, _ := ret[0].([]biz.Perm)
	return ret0
}

// GetPermissionsForUser indicates an expected call of GetPermissionsForUser.
func (mr *MockAuthRepoMockRecorder) GetPermissionsForUser(sys, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForUser", reflect.TypeOf((*MockAuthRepo)(nil).GetPermissionsForUser), sys, uid)
}

// GetRolesForUser mocks base method.
func (m *MockAuthRepo) GetRolesForUser(sys, uid string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesForUser", sys, uid)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRolesForUser indicates an expected call of GetRolesForUser.
func (mr *MockAuthRepoMockRecorder) GetRolesForUser(sys, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesForUser", reflect.TypeOf((*MockAuthRepo)(nil).GetRolesForUser), sys, uid)
}

// GetUsersForRole mocks base method.
func (m *MockAuthRepo) GetUsersForRole(sys, role string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForRole", sys, role)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetUsersForRole indicates an expected call of GetUsersForRole.
func (mr *MockAuthRepoMockRecorder) GetUsersForRole(sys, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForRole", reflect.TypeOf((*MockAuthRepo)(nil).GetUsersForRole), sys, role)
}

// HasRoleForUser mocks base method.
func (m *MockAuthRepo) HasRoleForUser(sys, uid, role string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRoleForUser", sys, uid, role)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRoleForUser indicates an expected call of HasRoleForUser.
func (mr *MockAuthRepoMockRecorder) HasRoleForUser(sys, uid, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRoleForUser", reflect.TypeOf((*MockAuthRepo)(nil).HasRoleForUser), sys, uid, role)
}

// RemoveRolePolicy mocks base method.
func (m *MockAuthRepo) RemoveRolePolicy(sys, role, obj string, act biz.Actions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRolePolicy", sys, role, obj, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRolePolicy indicates an expected call of RemoveRolePolicy.
func (mr *MockAuthRepoMockRecorder) RemoveRolePolicy(sys, role, obj, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRolePolicy", reflect.TypeOf((*MockAuthRepo)(nil).RemoveRolePolicy), sys, role, obj, act)
}

// RemoveUserPolicy mocks base method.
func (m *MockAuthRepo) RemoveUserPolicy(sys, uid, obj string, act biz.Actions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserPolicy", sys, uid, obj, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserPolicy indicates an expected call of RemoveUserPolicy.
func (mr *MockAuthRepoMockRecorder) RemoveUserPolicy(sys, uid, obj, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserPolicy", reflect.TypeOf((*MockAuthRepo)(nil).RemoveUserPolicy), sys, uid, obj, act)
}

// MockAuthEnforceRepo is a mock of AuthEnforceRepo interface.
type MockAuthEnforceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthEnforceRepoMockRecorder
}

// MockAuthEnforceRepoMockRecorder is the mock recorder for MockAuthEnforceRepo.
type MockAuthEnforceRepoMockRecorder struct {
	mock *MockAuthEnforceRepo
}

// NewMockAuthEnforceRepo creates a new mock instance.
func NewMockAuthEnforceRepo(ctrl *gomock.Controller) *MockAuthEnforceRepo {
	mock := &MockAuthEnforceRepo{ctrl: ctrl}
	mock.recorder = &MockAuthEnforceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthEnforceRepo) EXPECT() *MockAuthEnforceRepoMockRecorder {
	return m.recorder
}

// Enforce mocks base method.
func (m *MockAuthEnforceRepo) Enforce(sys, sub, obj string, act biz.Actions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enforce", sys, sub, obj, act)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enforce indicates an expected call of Enforce.
func (mr *MockAuthEnforceRepoMockRecorder) Enforce(sys, sub, obj, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enforce", reflect.TypeOf((*MockAuthEnforceRepo)(nil).Enforce), sys, sub, obj, act)
}

// MockAuthMgrRepo is a mock of AuthMgrRepo interface.
type MockAuthMgrRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMgrRepoMockRecorder
}

// MockAuthMgrRepoMockRecorder is the mock recorder for MockAuthMgrRepo.
type MockAuthMgrRepoMockRecorder struct {
	mock *MockAuthMgrRepo
}

// NewMockAuthMgrRepo creates a new mock instance.
func NewMockAuthMgrRepo(ctrl *gomock.Controller) *MockAuthMgrRepo {
	mock := &MockAuthMgrRepo{ctrl: ctrl}
	mock.recorder = &MockAuthMgrRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMgrRepo) EXPECT() *MockAuthMgrRepoMockRecorder {
	return m.recorder
}

// AddAdmin mocks base method.
func (m *MockAuthMgrRepo) AddAdmin(sys, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdmin", sys, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAdmin indicates an expected call of AddAdmin.
func (mr *MockAuthMgrRepoMockRecorder) AddAdmin(sys, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdmin", reflect.TypeOf((*MockAuthMgrRepo)(nil).AddAdmin), sys, uid)
}

// AddRoleForUser mocks base method.
func (m *MockAuthMgrRepo) AddRoleForUser(uid, role, sys string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoleForUser", uid, role, sys)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRoleForUser indicates an expected call of AddRoleForUser.
func (mr *MockAuthMgrRepoMockRecorder) AddRoleForUser(uid, role, sys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoleForUser", reflect.TypeOf((*MockAuthMgrRepo)(nil).AddRoleForUser), uid, role, sys)
}

// AddRolePolicy mocks base method.
func (m *MockAuthMgrRepo) AddRolePolicy(sys string, subs []string, obj string, acts []biz.Actions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRolePolicy", sys, subs, obj, acts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRolePolicy indicates an expected call of AddRolePolicy.
func (mr *MockAuthMgrRepoMockRecorder) AddRolePolicy(sys, subs, obj, acts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRolePolicy", reflect.TypeOf((*MockAuthMgrRepo)(nil).AddRolePolicy), sys, subs, obj, acts)
}

// AddUserPolicy mocks base method.
func (m *MockAuthMgrRepo) AddUserPolicy(sys string, subs []string, obj string, acts []biz.Actions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserPolicy", sys, subs, obj, acts)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserPolicy indicates an expected call of AddUserPolicy.
func (mr *MockAuthMgrRepoMockRecorder) AddUserPolicy(sys, subs, obj, acts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserPolicy", reflect.TypeOf((*MockAuthMgrRepo)(nil).AddUserPolicy), sys, subs, obj, acts)
}

// DeleteRoleForUser mocks base method.
func (m *MockAuthMgrRepo) DeleteRoleForUser(sys, uid, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoleForUser", sys, uid, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoleForUser indicates an expected call of DeleteRoleForUser.
func (mr *MockAuthMgrRepoMockRecorder) DeleteRoleForUser(sys, uid, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoleForUser", reflect.TypeOf((*MockAuthMgrRepo)(nil).DeleteRoleForUser), sys, uid, role)
}

// GetPermissionsForUser mocks base method.
func (m *MockAuthMgrRepo) GetPermissionsForUser(sys, uid string) []biz.Perm {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsForUser", sys, uid)
	ret0, _ := ret[0].([]biz.Perm)
	return ret0
}

// GetPermissionsForUser indicates an expected call of GetPermissionsForUser.
func (mr *MockAuthMgrRepoMockRecorder) GetPermissionsForUser(sys, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForUser", reflect.TypeOf((*MockAuthMgrRepo)(nil).GetPermissionsForUser), sys, uid)
}

// GetRolesForUser mocks base method.
func (m *MockAuthMgrRepo) GetRolesForUser(sys, uid string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesForUser", sys, uid)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetRolesForUser indicates an expected call of GetRolesForUser.
func (mr *MockAuthMgrRepoMockRecorder) GetRolesForUser(sys, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesForUser", reflect.TypeOf((*MockAuthMgrRepo)(nil).GetRolesForUser), sys, uid)
}

// GetUsersForRole mocks base method.
func (m *MockAuthMgrRepo) GetUsersForRole(sys, role string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForRole", sys, role)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetUsersForRole indicates an expected call of GetUsersForRole.
func (mr *MockAuthMgrRepoMockRecorder) GetUsersForRole(sys, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForRole", reflect.TypeOf((*MockAuthMgrRepo)(nil).GetUsersForRole), sys, role)
}

// HasRoleForUser mocks base method.
func (m *MockAuthMgrRepo) HasRoleForUser(sys, uid, role string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRoleForUser", sys, uid, role)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRoleForUser indicates an expected call of HasRoleForUser.
func (mr *MockAuthMgrRepoMockRecorder) HasRoleForUser(sys, uid, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRoleForUser", reflect.TypeOf((*MockAuthMgrRepo)(nil).HasRoleForUser), sys, uid, role)
}

// RemoveRolePolicy mocks base method.
func (m *MockAuthMgrRepo) RemoveRolePolicy(sys, role, obj string, act biz.Actions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRolePolicy", sys, role, obj, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRolePolicy indicates an expected call of RemoveRolePolicy.
func (mr *MockAuthMgrRepoMockRecorder) RemoveRolePolicy(sys, role, obj, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRolePolicy", reflect.TypeOf((*MockAuthMgrRepo)(nil).RemoveRolePolicy), sys, role, obj, act)
}

// RemoveUserPolicy mocks base method.
func (m *MockAuthMgrRepo) RemoveUserPolicy(sys, uid, obj string, act biz.Actions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserPolicy", sys, uid, obj, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserPolicy indicates an expected call of RemoveUserPolicy.
func (mr *MockAuthMgrRepoMockRecorder) RemoveUserPolicy(sys, uid, obj, act interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserPolicy", reflect.TypeOf((*MockAuthMgrRepo)(nil).RemoveUserPolicy), sys, uid, obj, act)
}
