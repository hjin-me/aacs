// Code generated by MockGen. DO NOT EDIT.
// Source: thirdparty.go

// Package biztest is a generated GoMock package.
package biztest

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	biz "github.com/lunzi/aacs/internal/biz"
)

// MockThirdPartyRepo is a mock of ThirdPartyRepo interface.
type MockThirdPartyRepo struct {
	ctrl     *gomock.Controller
	recorder *MockThirdPartyRepoMockRecorder
}

// MockThirdPartyRepoMockRecorder is the mock recorder for MockThirdPartyRepo.
type MockThirdPartyRepoMockRecorder struct {
	mock *MockThirdPartyRepo
}

// NewMockThirdPartyRepo creates a new mock instance.
func NewMockThirdPartyRepo(ctrl *gomock.Controller) *MockThirdPartyRepo {
	mock := &MockThirdPartyRepo{ctrl: ctrl}
	mock.recorder = &MockThirdPartyRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThirdPartyRepo) EXPECT() *MockThirdPartyRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockThirdPartyRepo) Add(ctx context.Context, appId, appName, owner, callbackUrl string, autoLogin bool) (biz.ThirdPartyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, appId, appName, owner, callbackUrl, autoLogin)
	ret0, _ := ret[0].(biz.ThirdPartyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockThirdPartyRepoMockRecorder) Add(ctx, appId, appName, owner, callbackUrl, autoLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockThirdPartyRepo)(nil).Add), ctx, appId, appName, owner, callbackUrl, autoLogin)
}

// GetInfo mocks base method.
func (m *MockThirdPartyRepo) GetInfo(ctx context.Context, appId string) (biz.ThirdPartyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, appId)
	ret0, _ := ret[0].(biz.ThirdPartyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockThirdPartyRepoMockRecorder) GetInfo(ctx, appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockThirdPartyRepo)(nil).GetInfo), ctx, appId)
}

// ListAll mocks base method.
func (m *MockThirdPartyRepo) ListAll(ctx context.Context) ([]biz.ThirdPartyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx)
	ret0, _ := ret[0].([]biz.ThirdPartyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockThirdPartyRepoMockRecorder) ListAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockThirdPartyRepo)(nil).ListAll), ctx)
}

// VerifyThirdParty mocks base method.
func (m *MockThirdPartyRepo) VerifyThirdParty(ctx context.Context, appId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyThirdParty", ctx, appId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyThirdParty indicates an expected call of VerifyThirdParty.
func (mr *MockThirdPartyRepoMockRecorder) VerifyThirdParty(ctx, appId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyThirdParty", reflect.TypeOf((*MockThirdPartyRepo)(nil).VerifyThirdParty), ctx, appId)
}
