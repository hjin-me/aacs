// Code generated by MockGen. DO NOT EDIT.
// Source: accounts.go

// Package biztest is a generated GoMock package.
package biztest

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	biz "github.com/lunzi/aacs/internal/biz"
)

// MockAccountsRepo is a mock of AccountsRepo interface.
type MockAccountsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsRepoMockRecorder
}

// MockAccountsRepoMockRecorder is the mock recorder for MockAccountsRepo.
type MockAccountsRepoMockRecorder struct {
	mock *MockAccountsRepo
}

// NewMockAccountsRepo creates a new mock instance.
func NewMockAccountsRepo(ctrl *gomock.Controller) *MockAccountsRepo {
	mock := &MockAccountsRepo{ctrl: ctrl}
	mock.recorder = &MockAccountsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsRepo) EXPECT() *MockAccountsRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockAccountsRepo) Add(ctx context.Context, a biz.Account, ignoreConflict bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, a, ignoreConflict)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockAccountsRepoMockRecorder) Add(ctx, a, ignoreConflict interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockAccountsRepo)(nil).Add), ctx, a, ignoreConflict)
}

// AllSubject mocks base method.
func (m *MockAccountsRepo) AllSubject(ctx context.Context) ([]biz.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllSubject", ctx)
	ret0, _ := ret[0].([]biz.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllSubject indicates an expected call of AllSubject.
func (mr *MockAccountsRepoMockRecorder) AllSubject(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllSubject", reflect.TypeOf((*MockAccountsRepo)(nil).AllSubject), ctx)
}

// GetByID mocks base method.
func (m *MockAccountsRepo) GetByID(ctx context.Context, id string) (biz.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(biz.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccountsRepoMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccountsRepo)(nil).GetByID), ctx, id)
}

// ImportAccount mocks base method.
func (m *MockAccountsRepo) ImportAccount(ctx context.Context, identSource, uid string) (biz.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAccount", ctx, identSource, uid)
	ret0, _ := ret[0].(biz.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAccount indicates an expected call of ImportAccount.
func (mr *MockAccountsRepoMockRecorder) ImportAccount(ctx, identSource, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAccount", reflect.TypeOf((*MockAccountsRepo)(nil).ImportAccount), ctx, identSource, uid)
}

// Save mocks base method.
func (m *MockAccountsRepo) Save(ctx context.Context, a biz.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAccountsRepoMockRecorder) Save(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountsRepo)(nil).Save), ctx, a)
}

// SyncWecom mocks base method.
func (m *MockAccountsRepo) SyncWecom(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncWecom", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncWecom indicates an expected call of SyncWecom.
func (mr *MockAccountsRepoMockRecorder) SyncWecom(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncWecom", reflect.TypeOf((*MockAccountsRepo)(nil).SyncWecom), ctx)
}

// MockSaveAccountRepo is a mock of SaveAccountRepo interface.
type MockSaveAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSaveAccountRepoMockRecorder
}

// MockSaveAccountRepoMockRecorder is the mock recorder for MockSaveAccountRepo.
type MockSaveAccountRepoMockRecorder struct {
	mock *MockSaveAccountRepo
}

// NewMockSaveAccountRepo creates a new mock instance.
func NewMockSaveAccountRepo(ctrl *gomock.Controller) *MockSaveAccountRepo {
	mock := &MockSaveAccountRepo{ctrl: ctrl}
	mock.recorder = &MockSaveAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaveAccountRepo) EXPECT() *MockSaveAccountRepoMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockSaveAccountRepo) Save(ctx context.Context, a biz.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSaveAccountRepoMockRecorder) Save(ctx, a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSaveAccountRepo)(nil).Save), ctx, a)
}
