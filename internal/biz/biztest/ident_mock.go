// Code generated by MockGen. DO NOT EDIT.
// Source: ident.go

// Package biztest is a generated GoMock package.
package biztest

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	openidproviderv1 "github.com/lunzi/aacs/api/openidprovider/v1"
	biz "github.com/lunzi/aacs/internal/biz"
)

// MockIdentRepo is a mock of IdentRepo interface.
type MockIdentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIdentRepoMockRecorder
}

// MockIdentRepoMockRecorder is the mock recorder for MockIdentRepo.
type MockIdentRepoMockRecorder struct {
	mock *MockIdentRepo
}

// NewMockIdentRepo creates a new mock instance.
func NewMockIdentRepo(ctrl *gomock.Controller) *MockIdentRepo {
	mock := &MockIdentRepo{ctrl: ctrl}
	mock.recorder = &MockIdentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentRepo) EXPECT() *MockIdentRepoMockRecorder {
	return m.recorder
}

// Basic mocks base method.
func (m *MockIdentRepo) Basic(ctx context.Context, source, app, uid, pwd string) (biz.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Basic", ctx, source, app, uid, pwd)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Basic indicates an expected call of Basic.
func (mr *MockIdentRepoMockRecorder) Basic(ctx, source, app, uid, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Basic", reflect.TypeOf((*MockIdentRepo)(nil).Basic), ctx, source, app, uid, pwd)
}

// GetUIDByRelation mocks base method.
func (m *MockIdentRepo) GetUIDByRelation(ctx context.Context, identSource, id string) (biz.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUIDByRelation", ctx, identSource, id)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUIDByRelation indicates an expected call of GetUIDByRelation.
func (mr *MockIdentRepoMockRecorder) GetUIDByRelation(ctx, identSource, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUIDByRelation", reflect.TypeOf((*MockIdentRepo)(nil).GetUIDByRelation), ctx, identSource, id)
}

// GrantToken mocks base method.
func (m *MockIdentRepo) GrantToken(ctx context.Context, app, uid string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantToken", ctx, app, uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GrantToken indicates an expected call of GrantToken.
func (mr *MockIdentRepoMockRecorder) GrantToken(ctx, app, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantToken", reflect.TypeOf((*MockIdentRepo)(nil).GrantToken), ctx, app, uid)
}

// GrantTokenWithPeriod mocks base method.
func (m *MockIdentRepo) GrantTokenWithPeriod(ctx context.Context, app, uid string, p time.Duration) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantTokenWithPeriod", ctx, app, uid, p)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GrantTokenWithPeriod indicates an expected call of GrantTokenWithPeriod.
func (mr *MockIdentRepoMockRecorder) GrantTokenWithPeriod(ctx, app, uid, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantTokenWithPeriod", reflect.TypeOf((*MockIdentRepo)(nil).GrantTokenWithPeriod), ctx, app, uid, p)
}

// ParseUID mocks base method.
func (m *MockIdentRepo) ParseUID(ctx context.Context, uid string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUID", ctx, uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseUID indicates an expected call of ParseUID.
func (mr *MockIdentRepoMockRecorder) ParseUID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUID", reflect.TypeOf((*MockIdentRepo)(nil).ParseUID), ctx, uid)
}

// SaveRelation mocks base method.
func (m *MockIdentRepo) SaveRelation(ctx context.Context, uId, identId, identSource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRelation", ctx, uId, identId, identSource)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRelation indicates an expected call of SaveRelation.
func (mr *MockIdentRepoMockRecorder) SaveRelation(ctx, uId, identId, identSource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRelation", reflect.TypeOf((*MockIdentRepo)(nil).SaveRelation), ctx, uId, identId, identSource)
}

// TokenAuth mocks base method.
func (m *MockIdentRepo) TokenAuth(ctx context.Context, source, app, token string) (biz.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenAuth", ctx, source, app, token)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenAuth indicates an expected call of TokenAuth.
func (mr *MockIdentRepoMockRecorder) TokenAuth(ctx, source, app, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenAuth", reflect.TypeOf((*MockIdentRepo)(nil).TokenAuth), ctx, source, app, token)
}

// VerifyToken mocks base method.
func (m *MockIdentRepo) VerifyToken(ctx context.Context, token string) (biz.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockIdentRepoMockRecorder) VerifyToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockIdentRepo)(nil).VerifyToken), ctx, token)
}

// MockIdentTokenRepo is a mock of IdentTokenRepo interface.
type MockIdentTokenRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIdentTokenRepoMockRecorder
}

// MockIdentTokenRepoMockRecorder is the mock recorder for MockIdentTokenRepo.
type MockIdentTokenRepoMockRecorder struct {
	mock *MockIdentTokenRepo
}

// NewMockIdentTokenRepo creates a new mock instance.
func NewMockIdentTokenRepo(ctrl *gomock.Controller) *MockIdentTokenRepo {
	mock := &MockIdentTokenRepo{ctrl: ctrl}
	mock.recorder = &MockIdentTokenRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentTokenRepo) EXPECT() *MockIdentTokenRepoMockRecorder {
	return m.recorder
}

// VerifyToken mocks base method.
func (m *MockIdentTokenRepo) VerifyToken(ctx context.Context, token string) (biz.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockIdentTokenRepoMockRecorder) VerifyToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockIdentTokenRepo)(nil).VerifyToken), ctx, token)
}

// MockOpenIDSet is a mock of OpenIDSet interface.
type MockOpenIDSet struct {
	ctrl     *gomock.Controller
	recorder *MockOpenIDSetMockRecorder
}

// MockOpenIDSetMockRecorder is the mock recorder for MockOpenIDSet.
type MockOpenIDSetMockRecorder struct {
	mock *MockOpenIDSet
}

// NewMockOpenIDSet creates a new mock instance.
func NewMockOpenIDSet(ctrl *gomock.Controller) *MockOpenIDSet {
	mock := &MockOpenIDSet{ctrl: ctrl}
	mock.recorder = &MockOpenIDSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenIDSet) EXPECT() *MockOpenIDSetMockRecorder {
	return m.recorder
}

// BasicAuth mocks base method.
func (m *MockOpenIDSet) BasicAuth(ctx context.Context, name, uid, pwd string) (biz.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BasicAuth", ctx, name, uid, pwd)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BasicAuth indicates an expected call of BasicAuth.
func (mr *MockOpenIDSetMockRecorder) BasicAuth(ctx, name, uid, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BasicAuth", reflect.TypeOf((*MockOpenIDSet)(nil).BasicAuth), ctx, name, uid, pwd)
}

// Get mocks base method.
func (m *MockOpenIDSet) Get(ctx context.Context, name string) (openidproviderv1.OpenIDProviderClient, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name)
	ret0, _ := ret[0].(openidproviderv1.OpenIDProviderClient)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockOpenIDSetMockRecorder) Get(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOpenIDSet)(nil).Get), ctx, name)
}

// ParseUID mocks base method.
func (m *MockOpenIDSet) ParseUID(ctx context.Context, uid string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUID", ctx, uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseUID indicates an expected call of ParseUID.
func (mr *MockOpenIDSetMockRecorder) ParseUID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUID", reflect.TypeOf((*MockOpenIDSet)(nil).ParseUID), ctx, uid)
}

// Register mocks base method.
func (m *MockOpenIDSet) Register(ctx context.Context, o openidproviderv1.OpenIDProviderClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockOpenIDSetMockRecorder) Register(ctx, o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockOpenIDSet)(nil).Register), ctx, o)
}

// SearchUid mocks base method.
func (m *MockOpenIDSet) SearchUid(ctx context.Context, name, uid string) (biz.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUid", ctx, name, uid)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUid indicates an expected call of SearchUid.
func (mr *MockOpenIDSetMockRecorder) SearchUid(ctx, name, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUid", reflect.TypeOf((*MockOpenIDSet)(nil).SearchUid), ctx, name, uid)
}

// TokenAuth mocks base method.
func (m *MockOpenIDSet) TokenAuth(ctx context.Context, name, token string) (biz.Sub, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenAuth", ctx, name, token)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TokenAuth indicates an expected call of TokenAuth.
func (mr *MockOpenIDSetMockRecorder) TokenAuth(ctx, name, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenAuth", reflect.TypeOf((*MockOpenIDSet)(nil).TokenAuth), ctx, name, token)
}

// MockOpenIDProvider is a mock of OpenIDProvider interface.
type MockOpenIDProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOpenIDProviderMockRecorder
}

// MockOpenIDProviderMockRecorder is the mock recorder for MockOpenIDProvider.
type MockOpenIDProviderMockRecorder struct {
	mock *MockOpenIDProvider
}

// NewMockOpenIDProvider creates a new mock instance.
func NewMockOpenIDProvider(ctrl *gomock.Controller) *MockOpenIDProvider {
	mock := &MockOpenIDProvider{ctrl: ctrl}
	mock.recorder = &MockOpenIDProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenIDProvider) EXPECT() *MockOpenIDProviderMockRecorder {
	return m.recorder
}

// Basic mocks base method.
func (m *MockOpenIDProvider) Basic(ctx context.Context, uid, pwd string) (biz.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Basic", ctx, uid, pwd)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Basic indicates an expected call of Basic.
func (mr *MockOpenIDProviderMockRecorder) Basic(ctx, uid, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Basic", reflect.TypeOf((*MockOpenIDProvider)(nil).Basic), ctx, uid, pwd)
}

// Name mocks base method.
func (m *MockOpenIDProvider) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockOpenIDProviderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockOpenIDProvider)(nil).Name))
}

// SearchUid mocks base method.
func (m *MockOpenIDProvider) SearchUid(ctx context.Context, uid string) (biz.Sub, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUid", ctx, uid)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUid indicates an expected call of SearchUid.
func (mr *MockOpenIDProviderMockRecorder) SearchUid(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUid", reflect.TypeOf((*MockOpenIDProvider)(nil).SearchUid), ctx, uid)
}

// TokenAuth mocks base method.
func (m *MockOpenIDProvider) TokenAuth(ctx context.Context, token string) (biz.Sub, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenAuth", ctx, token)
	ret0, _ := ret[0].(biz.Sub)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// TokenAuth indicates an expected call of TokenAuth.
func (mr *MockOpenIDProviderMockRecorder) TokenAuth(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenAuth", reflect.TypeOf((*MockOpenIDProvider)(nil).TokenAuth), ctx, token)
}
