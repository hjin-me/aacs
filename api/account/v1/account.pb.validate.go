// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/account/v1/account.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateReqMultiError, or nil
// if none found.
func (m *CreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CreateReqValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDisplayName()) < 1 {
		err := CreateReqValidationError{
			field:  "DisplayName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateReqValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhoneNo()) < 1 {
		err := CreateReqValidationError{
			field:  "PhoneNo",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPwd()) < 1 {
		err := CreateReqValidationError{
			field:  "Pwd",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateReqMultiError(errors)
	}

	return nil
}

func (m *CreateReq) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateReq) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateReqMultiError is an error wrapping multiple validation errors returned
// by CreateReq.ValidateAll() if the designated constraints aren't met.
type CreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReqMultiError) AllErrors() []error { return m }

// CreateReqValidationError is the validation error returned by
// CreateReq.Validate if the designated constraints aren't met.
type CreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReqValidationError) ErrorName() string { return "CreateReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReqValidationError{}

// Validate checks the field values on ResetPwdReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetPwdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPwdReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetPwdReqMultiError, or
// nil if none found.
func (m *ResetPwdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPwdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOldPwd()) < 1 {
		err := ResetPwdReqValidationError{
			field:  "OldPwd",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNewPwd()) < 1 {
		err := ResetPwdReqValidationError{
			field:  "NewPwd",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVerifyPwd()) < 1 {
		err := ResetPwdReqValidationError{
			field:  "VerifyPwd",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ResetPwdReqMultiError(errors)
	}

	return nil
}

// ResetPwdReqMultiError is an error wrapping multiple validation errors
// returned by ResetPwdReq.ValidateAll() if the designated constraints aren't met.
type ResetPwdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPwdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPwdReqMultiError) AllErrors() []error { return m }

// ResetPwdReqValidationError is the validation error returned by
// ResetPwdReq.Validate if the designated constraints aren't met.
type ResetPwdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPwdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPwdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPwdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPwdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPwdReqValidationError) ErrorName() string { return "ResetPwdReqValidationError" }

// Error satisfies the builtin error interface
func (e ResetPwdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPwdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPwdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPwdReqValidationError{}

// Validate checks the field values on AllAccountsReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllAccountsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllAccountsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllAccountsReqMultiError,
// or nil if none found.
func (m *AllAccountsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AllAccountsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AllAccountsReqMultiError(errors)
	}

	return nil
}

// AllAccountsReqMultiError is an error wrapping multiple validation errors
// returned by AllAccountsReq.ValidateAll() if the designated constraints
// aren't met.
type AllAccountsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllAccountsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllAccountsReqMultiError) AllErrors() []error { return m }

// AllAccountsReqValidationError is the validation error returned by
// AllAccountsReq.Validate if the designated constraints aren't met.
type AllAccountsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllAccountsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllAccountsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllAccountsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllAccountsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllAccountsReqValidationError) ErrorName() string { return "AllAccountsReqValidationError" }

// Error satisfies the builtin error interface
func (e AllAccountsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllAccountsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllAccountsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllAccountsReqValidationError{}

// Validate checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AccountMultiError, or nil if none found.
func (m *Account) ValidateAll() error {
	return m.validate(true)
}

func (m *Account) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for DisplayName

	// no validation rules for Email

	// no validation rules for PhoneNo

	// no validation rules for Retired

	for idx, item := range m.GetRelatedIdents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AccountValidationError{
						field:  fmt.Sprintf("RelatedIdents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AccountValidationError{
						field:  fmt.Sprintf("RelatedIdents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AccountValidationError{
					field:  fmt.Sprintf("RelatedIdents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AccountMultiError(errors)
	}

	return nil
}

// AccountMultiError is an error wrapping multiple validation errors returned
// by Account.ValidateAll() if the designated constraints aren't met.
type AccountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountMultiError) AllErrors() []error { return m }

// AccountValidationError is the validation error returned by Account.Validate
// if the designated constraints aren't met.
type AccountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountValidationError) ErrorName() string { return "AccountValidationError" }

// Error satisfies the builtin error interface
func (e AccountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountValidationError{}

// Validate checks the field values on AllAccountsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AllAccountsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllAccountsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AllAccountsReplyMultiError, or nil if none found.
func (m *AllAccountsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllAccountsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllAccountsReplyValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllAccountsReplyValidationError{
						field:  fmt.Sprintf("Accounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllAccountsReplyValidationError{
					field:  fmt.Sprintf("Accounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllAccountsReplyMultiError(errors)
	}

	return nil
}

// AllAccountsReplyMultiError is an error wrapping multiple validation errors
// returned by AllAccountsReply.ValidateAll() if the designated constraints
// aren't met.
type AllAccountsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllAccountsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllAccountsReplyMultiError) AllErrors() []error { return m }

// AllAccountsReplyValidationError is the validation error returned by
// AllAccountsReply.Validate if the designated constraints aren't met.
type AllAccountsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllAccountsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllAccountsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllAccountsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllAccountsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllAccountsReplyValidationError) ErrorName() string { return "AllAccountsReplyValidationError" }

// Error satisfies the builtin error interface
func (e AllAccountsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllAccountsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllAccountsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllAccountsReplyValidationError{}

// Validate checks the field values on SaveRelationReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SaveRelationReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveRelationReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveRelationReqMultiError, or nil if none found.
func (m *SaveRelationReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveRelationReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUid()) < 1 {
		err := SaveRelationReqValidationError{
			field:  "Uid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIdentSource()) < 1 {
		err := SaveRelationReqValidationError{
			field:  "IdentSource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIdentId()) < 1 {
		err := SaveRelationReqValidationError{
			field:  "IdentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SaveRelationReqMultiError(errors)
	}

	return nil
}

// SaveRelationReqMultiError is an error wrapping multiple validation errors
// returned by SaveRelationReq.ValidateAll() if the designated constraints
// aren't met.
type SaveRelationReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveRelationReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveRelationReqMultiError) AllErrors() []error { return m }

// SaveRelationReqValidationError is the validation error returned by
// SaveRelationReq.Validate if the designated constraints aren't met.
type SaveRelationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveRelationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveRelationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveRelationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveRelationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveRelationReqValidationError) ErrorName() string { return "SaveRelationReqValidationError" }

// Error satisfies the builtin error interface
func (e SaveRelationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveRelationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveRelationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveRelationReqValidationError{}

// Validate checks the field values on ImportAccountReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImportAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportAccountReqMultiError, or nil if none found.
func (m *ImportAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSource()) < 1 {
		err := ImportAccountReqValidationError{
			field:  "Source",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUid()) < 1 {
		err := ImportAccountReqValidationError{
			field:  "Uid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ImportAccountReqMultiError(errors)
	}

	return nil
}

// ImportAccountReqMultiError is an error wrapping multiple validation errors
// returned by ImportAccountReq.ValidateAll() if the designated constraints
// aren't met.
type ImportAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportAccountReqMultiError) AllErrors() []error { return m }

// ImportAccountReqValidationError is the validation error returned by
// ImportAccountReq.Validate if the designated constraints aren't met.
type ImportAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportAccountReqValidationError) ErrorName() string { return "ImportAccountReqValidationError" }

// Error satisfies the builtin error interface
func (e ImportAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportAccountReqValidationError{}

// Validate checks the field values on Account_Ident with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Account_Ident) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Account_Ident with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Account_IdentMultiError, or
// nil if none found.
func (m *Account_Ident) ValidateAll() error {
	return m.validate(true)
}

func (m *Account_Ident) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for Id

	if len(errors) > 0 {
		return Account_IdentMultiError(errors)
	}

	return nil
}

// Account_IdentMultiError is an error wrapping multiple validation errors
// returned by Account_Ident.ValidateAll() if the designated constraints
// aren't met.
type Account_IdentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Account_IdentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Account_IdentMultiError) AllErrors() []error { return m }

// Account_IdentValidationError is the validation error returned by
// Account_Ident.Validate if the designated constraints aren't met.
type Account_IdentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Account_IdentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Account_IdentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Account_IdentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Account_IdentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Account_IdentValidationError) ErrorName() string { return "Account_IdentValidationError" }

// Error satisfies the builtin error interface
func (e Account_IdentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccount_Ident.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Account_IdentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Account_IdentValidationError{}
