// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AccountHTTPServer interface {
	AllAccounts(context.Context, *AllAccountsReq) (*AllAccountsReply, error)
	Create(context.Context, *CreateReq) (*emptypb.Empty, error)
	ImportAccount(context.Context, *ImportAccountReq) (*emptypb.Empty, error)
	ResetPwd(context.Context, *ResetPwdReq) (*emptypb.Empty, error)
	SaveRelation(context.Context, *SaveRelationReq) (*emptypb.Empty, error)
}

func RegisterAccountHTTPServer(s *http.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/account/create", _Account_Create0_HTTP_Handler(srv))
	r.POST("/account/reset-pwd", _Account_ResetPwd0_HTTP_Handler(srv))
	r.GET("/account/all-accounts", _Account_AllAccounts0_HTTP_Handler(srv))
	r.POST("/account/save-relation", _Account_SaveRelation0_HTTP_Handler(srv))
	r.POST("/account/import-account", _Account_ImportAccount0_HTTP_Handler(srv))
}

func _Account_Create0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/account.v1.account/Create")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Create(ctx, req.(*CreateReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Account_ResetPwd0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPwdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/account.v1.account/ResetPwd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPwd(ctx, req.(*ResetPwdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Account_AllAccounts0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllAccountsReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/account.v1.account/AllAccounts")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AllAccounts(ctx, req.(*AllAccountsReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllAccountsReply)
		return ctx.Result(200, reply)
	}
}

func _Account_SaveRelation0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveRelationReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/account.v1.account/SaveRelation")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveRelation(ctx, req.(*SaveRelationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Account_ImportAccount0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ImportAccountReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/account.v1.account/ImportAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImportAccount(ctx, req.(*ImportAccountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AccountHTTPClient interface {
	AllAccounts(ctx context.Context, req *AllAccountsReq, opts ...http.CallOption) (rsp *AllAccountsReply, err error)
	Create(ctx context.Context, req *CreateReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ImportAccount(ctx context.Context, req *ImportAccountReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ResetPwd(ctx context.Context, req *ResetPwdReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SaveRelation(ctx context.Context, req *SaveRelationReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountHTTPClient(client *http.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) AllAccounts(ctx context.Context, in *AllAccountsReq, opts ...http.CallOption) (*AllAccountsReply, error) {
	var out AllAccountsReply
	pattern := "/account/all-accounts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/account.v1.account/AllAccounts"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Create(ctx context.Context, in *CreateReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/account/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/account.v1.account/Create"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ImportAccount(ctx context.Context, in *ImportAccountReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/account/import-account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/account.v1.account/ImportAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ResetPwd(ctx context.Context, in *ResetPwdReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/account/reset-pwd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/account.v1.account/ResetPwd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) SaveRelation(ctx context.Context, in *SaveRelationReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/account/save-relation"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/account.v1.account/SaveRelation"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
