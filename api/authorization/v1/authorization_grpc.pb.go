// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.1
// source: api/authorization/v1/authorization.proto

package authv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationClient interface {
	// casbin-like
	// 校验
	Enforce(ctx context.Context, in *EnforceReq, opts ...grpc.CallOption) (*ResultReply, error)
	// 增
	AddPermissionForUser(ctx context.Context, in *AddPermissionForUserReq, opts ...grpc.CallOption) (*ResultReply, error)
	AddPermissionForRole(ctx context.Context, in *AddPermissionForRoleReq, opts ...grpc.CallOption) (*ResultReply, error)
	AddRoleForUser(ctx context.Context, in *AddRoleForUserReq, opts ...grpc.CallOption) (*ResultReply, error)
	// 删
	DeletePermissionForUser(ctx context.Context, in *DeletePermissionForUserReq, opts ...grpc.CallOption) (*ResultReply, error)
	DeletePermissionForRole(ctx context.Context, in *DeletePermissionForRoleReq, opts ...grpc.CallOption) (*ResultReply, error)
	DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserReq, opts ...grpc.CallOption) (*ResultReply, error)
	// 查
	GetRolesForUser(ctx context.Context, in *GetRolesForUserReq, opts ...grpc.CallOption) (*GetRolesForUserReply, error)
	GetUsersForRole(ctx context.Context, in *GetUsersForRoleReq, opts ...grpc.CallOption) (*GetUsersForRoleReply, error)
	HasRoleForUser(ctx context.Context, in *HasRoleForUserReq, opts ...grpc.CallOption) (*HasRoleForUserReply, error)
	GetPermissionsForUser(ctx context.Context, in *GetPermissionsForUserReq, opts ...grpc.CallOption) (*GetPermissionsForUserReply, error)
}

type authorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationClient(cc grpc.ClientConnInterface) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) Enforce(ctx context.Context, in *EnforceReq, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AddPermissionForUser(ctx context.Context, in *AddPermissionForUserReq, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/AddPermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AddPermissionForRole(ctx context.Context, in *AddPermissionForRoleReq, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/AddPermissionForRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) AddRoleForUser(ctx context.Context, in *AddRoleForUserReq, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/AddRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeletePermissionForUser(ctx context.Context, in *DeletePermissionForUserReq, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/DeletePermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeletePermissionForRole(ctx context.Context, in *DeletePermissionForRoleReq, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/DeletePermissionForRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserReq, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/DeleteRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserReq, opts ...grpc.CallOption) (*GetRolesForUserReply, error) {
	out := new(GetRolesForUserReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/GetRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetUsersForRole(ctx context.Context, in *GetUsersForRoleReq, opts ...grpc.CallOption) (*GetUsersForRoleReply, error) {
	out := new(GetUsersForRoleReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/GetUsersForRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) HasRoleForUser(ctx context.Context, in *HasRoleForUserReq, opts ...grpc.CallOption) (*HasRoleForUserReply, error) {
	out := new(HasRoleForUserReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/HasRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) GetPermissionsForUser(ctx context.Context, in *GetPermissionsForUserReq, opts ...grpc.CallOption) (*GetPermissionsForUserReply, error) {
	out := new(GetPermissionsForUserReply)
	err := c.cc.Invoke(ctx, "/authorization.v1.Authorization/GetPermissionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
// All implementations must embed UnimplementedAuthorizationServer
// for forward compatibility
type AuthorizationServer interface {
	// casbin-like
	// 校验
	Enforce(context.Context, *EnforceReq) (*ResultReply, error)
	// 增
	AddPermissionForUser(context.Context, *AddPermissionForUserReq) (*ResultReply, error)
	AddPermissionForRole(context.Context, *AddPermissionForRoleReq) (*ResultReply, error)
	AddRoleForUser(context.Context, *AddRoleForUserReq) (*ResultReply, error)
	// 删
	DeletePermissionForUser(context.Context, *DeletePermissionForUserReq) (*ResultReply, error)
	DeletePermissionForRole(context.Context, *DeletePermissionForRoleReq) (*ResultReply, error)
	DeleteRoleForUser(context.Context, *DeleteRoleForUserReq) (*ResultReply, error)
	// 查
	GetRolesForUser(context.Context, *GetRolesForUserReq) (*GetRolesForUserReply, error)
	GetUsersForRole(context.Context, *GetUsersForRoleReq) (*GetUsersForRoleReply, error)
	HasRoleForUser(context.Context, *HasRoleForUserReq) (*HasRoleForUserReply, error)
	GetPermissionsForUser(context.Context, *GetPermissionsForUserReq) (*GetPermissionsForUserReply, error)
	mustEmbedUnimplementedAuthorizationServer()
}

// UnimplementedAuthorizationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServer struct {
}

func (UnimplementedAuthorizationServer) Enforce(context.Context, *EnforceReq) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (UnimplementedAuthorizationServer) AddPermissionForUser(context.Context, *AddPermissionForUserReq) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionForUser not implemented")
}
func (UnimplementedAuthorizationServer) AddPermissionForRole(context.Context, *AddPermissionForRoleReq) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionForRole not implemented")
}
func (UnimplementedAuthorizationServer) AddRoleForUser(context.Context, *AddRoleForUserReq) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoleForUser not implemented")
}
func (UnimplementedAuthorizationServer) DeletePermissionForUser(context.Context, *DeletePermissionForUserReq) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionForUser not implemented")
}
func (UnimplementedAuthorizationServer) DeletePermissionForRole(context.Context, *DeletePermissionForRoleReq) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionForRole not implemented")
}
func (UnimplementedAuthorizationServer) DeleteRoleForUser(context.Context, *DeleteRoleForUserReq) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForUser not implemented")
}
func (UnimplementedAuthorizationServer) GetRolesForUser(context.Context, *GetRolesForUserReq) (*GetRolesForUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (UnimplementedAuthorizationServer) GetUsersForRole(context.Context, *GetUsersForRoleReq) (*GetUsersForRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForRole not implemented")
}
func (UnimplementedAuthorizationServer) HasRoleForUser(context.Context, *HasRoleForUserReq) (*HasRoleForUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasRoleForUser not implemented")
}
func (UnimplementedAuthorizationServer) GetPermissionsForUser(context.Context, *GetPermissionsForUserReq) (*GetPermissionsForUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsForUser not implemented")
}
func (UnimplementedAuthorizationServer) mustEmbedUnimplementedAuthorizationServer() {}

// UnsafeAuthorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServer will
// result in compilation errors.
type UnsafeAuthorizationServer interface {
	mustEmbedUnimplementedAuthorizationServer()
}

func RegisterAuthorizationServer(s grpc.ServiceRegistrar, srv AuthorizationServer) {
	s.RegisterService(&Authorization_ServiceDesc, srv)
}

func _Authorization_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Enforce(ctx, req.(*EnforceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AddPermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddPermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/AddPermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddPermissionForUser(ctx, req.(*AddPermissionForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AddPermissionForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPermissionForRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddPermissionForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/AddPermissionForRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddPermissionForRole(ctx, req.(*AddPermissionForRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_AddRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).AddRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/AddRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).AddRoleForUser(ctx, req.(*AddRoleForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeletePermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeletePermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/DeletePermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeletePermissionForUser(ctx, req.(*DeletePermissionForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeletePermissionForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionForRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeletePermissionForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/DeletePermissionForRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeletePermissionForRole(ctx, req.(*DeletePermissionForRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_DeleteRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).DeleteRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/DeleteRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).DeleteRoleForUser(ctx, req.(*DeleteRoleForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/GetRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetRolesForUser(ctx, req.(*GetRolesForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetUsersForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersForRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetUsersForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/GetUsersForRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetUsersForRole(ctx, req.(*GetUsersForRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_HasRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasRoleForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).HasRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/HasRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).HasRoleForUser(ctx, req.(*HasRoleForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_GetPermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsForUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).GetPermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.v1.Authorization/GetPermissionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).GetPermissionsForUser(ctx, req.(*GetPermissionsForUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Authorization_ServiceDesc is the grpc.ServiceDesc for Authorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authorization.v1.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enforce",
			Handler:    _Authorization_Enforce_Handler,
		},
		{
			MethodName: "AddPermissionForUser",
			Handler:    _Authorization_AddPermissionForUser_Handler,
		},
		{
			MethodName: "AddPermissionForRole",
			Handler:    _Authorization_AddPermissionForRole_Handler,
		},
		{
			MethodName: "AddRoleForUser",
			Handler:    _Authorization_AddRoleForUser_Handler,
		},
		{
			MethodName: "DeletePermissionForUser",
			Handler:    _Authorization_DeletePermissionForUser_Handler,
		},
		{
			MethodName: "DeletePermissionForRole",
			Handler:    _Authorization_DeletePermissionForRole_Handler,
		},
		{
			MethodName: "DeleteRoleForUser",
			Handler:    _Authorization_DeleteRoleForUser_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _Authorization_GetRolesForUser_Handler,
		},
		{
			MethodName: "GetUsersForRole",
			Handler:    _Authorization_GetUsersForRole_Handler,
		},
		{
			MethodName: "HasRoleForUser",
			Handler:    _Authorization_HasRoleForUser_Handler,
		},
		{
			MethodName: "GetPermissionsForUser",
			Handler:    _Authorization_GetPermissionsForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/authorization/v1/authorization.proto",
}
