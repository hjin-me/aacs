// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package authv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AuthorizationHTTPServer interface {
	AddPermissionForRole(context.Context, *AddPermissionForRoleReq) (*ResultReply, error)
	AddPermissionForUser(context.Context, *AddPermissionForUserReq) (*ResultReply, error)
	AddRoleForUser(context.Context, *AddRoleForUserReq) (*ResultReply, error)
	DeletePermissionForRole(context.Context, *DeletePermissionForRoleReq) (*ResultReply, error)
	DeletePermissionForUser(context.Context, *DeletePermissionForUserReq) (*ResultReply, error)
	DeleteRoleForUser(context.Context, *DeleteRoleForUserReq) (*ResultReply, error)
	Enforce(context.Context, *EnforceReq) (*ResultReply, error)
	GetPermissionsForUser(context.Context, *GetPermissionsForUserReq) (*GetPermissionsForUserReply, error)
	GetRolesForUser(context.Context, *GetRolesForUserReq) (*GetRolesForUserReply, error)
	GetUsersForRole(context.Context, *GetUsersForRoleReq) (*GetUsersForRoleReply, error)
	HasRoleForUser(context.Context, *HasRoleForUserReq) (*HasRoleForUserReply, error)
}

func RegisterAuthorizationHTTPServer(s *http.Server, srv AuthorizationHTTPServer) {
	r := s.Route("/")
	r.GET("/auth/verify", _Authorization_Enforce0_HTTP_Handler(srv))
	r.PUT("/auth/add-perm-for-user", _Authorization_AddPermissionForUser0_HTTP_Handler(srv))
	r.PUT("/auth/add-perm-for-role", _Authorization_AddPermissionForRole0_HTTP_Handler(srv))
	r.PUT("/auth/add-role-for-user", _Authorization_AddRoleForUser0_HTTP_Handler(srv))
	r.DELETE("/auth/del-perm-for-user", _Authorization_DeletePermissionForUser0_HTTP_Handler(srv))
	r.DELETE("/auth/del-perm-for-role", _Authorization_DeletePermissionForRole0_HTTP_Handler(srv))
	r.DELETE("/auth/del-role-for-user", _Authorization_DeleteRoleForUser0_HTTP_Handler(srv))
	r.GET("/auth/get-roles-for-user", _Authorization_GetRolesForUser0_HTTP_Handler(srv))
	r.GET("/auth/get-users-for-role", _Authorization_GetUsersForRole0_HTTP_Handler(srv))
	r.GET("/auth/has-role-for-user", _Authorization_HasRoleForUser0_HTTP_Handler(srv))
	r.GET("/auth/get-perms-for-user", _Authorization_GetPermissionsForUser0_HTTP_Handler(srv))
}

func _Authorization_Enforce0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EnforceReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/Enforce")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Enforce(ctx, req.(*EnforceReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResultReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_AddPermissionForUser0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddPermissionForUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/AddPermissionForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddPermissionForUser(ctx, req.(*AddPermissionForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResultReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_AddPermissionForRole0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddPermissionForRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/AddPermissionForRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddPermissionForRole(ctx, req.(*AddPermissionForRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResultReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_AddRoleForUser0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRoleForUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/AddRoleForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddRoleForUser(ctx, req.(*AddRoleForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResultReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_DeletePermissionForUser0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePermissionForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/DeletePermissionForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePermissionForUser(ctx, req.(*DeletePermissionForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResultReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_DeletePermissionForRole0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePermissionForRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/DeletePermissionForRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePermissionForRole(ctx, req.(*DeletePermissionForRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResultReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_DeleteRoleForUser0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/DeleteRoleForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoleForUser(ctx, req.(*DeleteRoleForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResultReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_GetRolesForUser0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolesForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/GetRolesForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRolesForUser(ctx, req.(*GetRolesForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolesForUserReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_GetUsersForRole0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUsersForRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/GetUsersForRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUsersForRole(ctx, req.(*GetUsersForRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUsersForRoleReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_HasRoleForUser0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HasRoleForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/HasRoleForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HasRoleForUser(ctx, req.(*HasRoleForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HasRoleForUserReply)
		return ctx.Result(200, reply)
	}
}

func _Authorization_GetPermissionsForUser0_HTTP_Handler(srv AuthorizationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPermissionsForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/authorization.v1.Authorization/GetPermissionsForUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPermissionsForUser(ctx, req.(*GetPermissionsForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPermissionsForUserReply)
		return ctx.Result(200, reply)
	}
}

type AuthorizationHTTPClient interface {
	AddPermissionForRole(ctx context.Context, req *AddPermissionForRoleReq, opts ...http.CallOption) (rsp *ResultReply, err error)
	AddPermissionForUser(ctx context.Context, req *AddPermissionForUserReq, opts ...http.CallOption) (rsp *ResultReply, err error)
	AddRoleForUser(ctx context.Context, req *AddRoleForUserReq, opts ...http.CallOption) (rsp *ResultReply, err error)
	DeletePermissionForRole(ctx context.Context, req *DeletePermissionForRoleReq, opts ...http.CallOption) (rsp *ResultReply, err error)
	DeletePermissionForUser(ctx context.Context, req *DeletePermissionForUserReq, opts ...http.CallOption) (rsp *ResultReply, err error)
	DeleteRoleForUser(ctx context.Context, req *DeleteRoleForUserReq, opts ...http.CallOption) (rsp *ResultReply, err error)
	Enforce(ctx context.Context, req *EnforceReq, opts ...http.CallOption) (rsp *ResultReply, err error)
	GetPermissionsForUser(ctx context.Context, req *GetPermissionsForUserReq, opts ...http.CallOption) (rsp *GetPermissionsForUserReply, err error)
	GetRolesForUser(ctx context.Context, req *GetRolesForUserReq, opts ...http.CallOption) (rsp *GetRolesForUserReply, err error)
	GetUsersForRole(ctx context.Context, req *GetUsersForRoleReq, opts ...http.CallOption) (rsp *GetUsersForRoleReply, err error)
	HasRoleForUser(ctx context.Context, req *HasRoleForUserReq, opts ...http.CallOption) (rsp *HasRoleForUserReply, err error)
}

type AuthorizationHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthorizationHTTPClient(client *http.Client) AuthorizationHTTPClient {
	return &AuthorizationHTTPClientImpl{client}
}

func (c *AuthorizationHTTPClientImpl) AddPermissionForRole(ctx context.Context, in *AddPermissionForRoleReq, opts ...http.CallOption) (*ResultReply, error) {
	var out ResultReply
	pattern := "/auth/add-perm-for-role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/AddPermissionForRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) AddPermissionForUser(ctx context.Context, in *AddPermissionForUserReq, opts ...http.CallOption) (*ResultReply, error) {
	var out ResultReply
	pattern := "/auth/add-perm-for-user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/AddPermissionForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) AddRoleForUser(ctx context.Context, in *AddRoleForUserReq, opts ...http.CallOption) (*ResultReply, error) {
	var out ResultReply
	pattern := "/auth/add-role-for-user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/AddRoleForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) DeletePermissionForRole(ctx context.Context, in *DeletePermissionForRoleReq, opts ...http.CallOption) (*ResultReply, error) {
	var out ResultReply
	pattern := "/auth/del-perm-for-role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/DeletePermissionForRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) DeletePermissionForUser(ctx context.Context, in *DeletePermissionForUserReq, opts ...http.CallOption) (*ResultReply, error) {
	var out ResultReply
	pattern := "/auth/del-perm-for-user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/DeletePermissionForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserReq, opts ...http.CallOption) (*ResultReply, error) {
	var out ResultReply
	pattern := "/auth/del-role-for-user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/DeleteRoleForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) Enforce(ctx context.Context, in *EnforceReq, opts ...http.CallOption) (*ResultReply, error) {
	var out ResultReply
	pattern := "/auth/verify"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/Enforce"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) GetPermissionsForUser(ctx context.Context, in *GetPermissionsForUserReq, opts ...http.CallOption) (*GetPermissionsForUserReply, error) {
	var out GetPermissionsForUserReply
	pattern := "/auth/get-perms-for-user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/GetPermissionsForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) GetRolesForUser(ctx context.Context, in *GetRolesForUserReq, opts ...http.CallOption) (*GetRolesForUserReply, error) {
	var out GetRolesForUserReply
	pattern := "/auth/get-roles-for-user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/GetRolesForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) GetUsersForRole(ctx context.Context, in *GetUsersForRoleReq, opts ...http.CallOption) (*GetUsersForRoleReply, error) {
	var out GetUsersForRoleReply
	pattern := "/auth/get-users-for-role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/GetUsersForRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthorizationHTTPClientImpl) HasRoleForUser(ctx context.Context, in *HasRoleForUserReq, opts ...http.CallOption) (*HasRoleForUserReply, error) {
	var out HasRoleForUserReply
	pattern := "/auth/has-role-for-user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/authorization.v1.Authorization/HasRoleForUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
