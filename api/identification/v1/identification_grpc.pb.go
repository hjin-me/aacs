// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.1
// source: api/identification/v1/identification.proto

package identv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentificationClient is the client API for Identification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentificationClient interface {
	Basic(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*AuthReply, error)
	VerifyToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenInfoReply, error)
	WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenInfoReply, error)
	StandardizeAccount(ctx context.Context, in *StandardizeAccountReq, opts ...grpc.CallOption) (*TokenInfoReply, error)
}

type identificationClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentificationClient(cc grpc.ClientConnInterface) IdentificationClient {
	return &identificationClient{cc}
}

func (c *identificationClient) Basic(ctx context.Context, in *BasicRequest, opts ...grpc.CallOption) (*AuthReply, error) {
	out := new(AuthReply)
	err := c.cc.Invoke(ctx, "/identification.v1.Identification/Basic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identificationClient) VerifyToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenInfoReply, error) {
	out := new(TokenInfoReply)
	err := c.cc.Invoke(ctx, "/identification.v1.Identification/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identificationClient) WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TokenInfoReply, error) {
	out := new(TokenInfoReply)
	err := c.cc.Invoke(ctx, "/identification.v1.Identification/WhoAmI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identificationClient) StandardizeAccount(ctx context.Context, in *StandardizeAccountReq, opts ...grpc.CallOption) (*TokenInfoReply, error) {
	out := new(TokenInfoReply)
	err := c.cc.Invoke(ctx, "/identification.v1.Identification/StandardizeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentificationServer is the server API for Identification service.
// All implementations must embed UnimplementedIdentificationServer
// for forward compatibility
type IdentificationServer interface {
	Basic(context.Context, *BasicRequest) (*AuthReply, error)
	VerifyToken(context.Context, *TokenRequest) (*TokenInfoReply, error)
	WhoAmI(context.Context, *emptypb.Empty) (*TokenInfoReply, error)
	StandardizeAccount(context.Context, *StandardizeAccountReq) (*TokenInfoReply, error)
	mustEmbedUnimplementedIdentificationServer()
}

// UnimplementedIdentificationServer must be embedded to have forward compatible implementations.
type UnimplementedIdentificationServer struct {
}

func (UnimplementedIdentificationServer) Basic(context.Context, *BasicRequest) (*AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Basic not implemented")
}
func (UnimplementedIdentificationServer) VerifyToken(context.Context, *TokenRequest) (*TokenInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedIdentificationServer) WhoAmI(context.Context, *emptypb.Empty) (*TokenInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedIdentificationServer) StandardizeAccount(context.Context, *StandardizeAccountReq) (*TokenInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StandardizeAccount not implemented")
}
func (UnimplementedIdentificationServer) mustEmbedUnimplementedIdentificationServer() {}

// UnsafeIdentificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentificationServer will
// result in compilation errors.
type UnsafeIdentificationServer interface {
	mustEmbedUnimplementedIdentificationServer()
}

func RegisterIdentificationServer(s grpc.ServiceRegistrar, srv IdentificationServer) {
	s.RegisterService(&Identification_ServiceDesc, srv)
}

func _Identification_Basic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentificationServer).Basic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identification.v1.Identification/Basic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentificationServer).Basic(ctx, req.(*BasicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identification_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentificationServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identification.v1.Identification/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentificationServer).VerifyToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identification_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentificationServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identification.v1.Identification/WhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentificationServer).WhoAmI(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identification_StandardizeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StandardizeAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentificationServer).StandardizeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identification.v1.Identification/StandardizeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentificationServer).StandardizeAccount(ctx, req.(*StandardizeAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Identification_ServiceDesc is the grpc.ServiceDesc for Identification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Identification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identification.v1.Identification",
	HandlerType: (*IdentificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Basic",
			Handler:    _Identification_Basic_Handler,
		},
		{
			MethodName: "VerifyToken",
			Handler:    _Identification_VerifyToken_Handler,
		},
		{
			MethodName: "WhoAmI",
			Handler:    _Identification_WhoAmI_Handler,
		},
		{
			MethodName: "StandardizeAccount",
			Handler:    _Identification_StandardizeAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/identification/v1/identification.proto",
}
