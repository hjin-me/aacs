// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package identv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type IdentificationHTTPServer interface {
	Basic(context.Context, *BasicRequest) (*AuthReply, error)
	StandardizeAccount(context.Context, *StandardizeAccountReq) (*TokenInfoReply, error)
	VerifyToken(context.Context, *TokenRequest) (*TokenInfoReply, error)
	WhoAmI(context.Context, *emptypb.Empty) (*TokenInfoReply, error)
}

func RegisterIdentificationHTTPServer(s *http.Server, srv IdentificationHTTPServer) {
	r := s.Route("/")
	r.POST("/ident/basic", _Identification_Basic0_HTTP_Handler(srv))
	r.POST("/ident/verify-token", _Identification_VerifyToken0_HTTP_Handler(srv))
	r.GET("/ident/who-am-i", _Identification_WhoAmI0_HTTP_Handler(srv))
	r.POST("/ident/standardize-account", _Identification_StandardizeAccount0_HTTP_Handler(srv))
}

func _Identification_Basic0_HTTP_Handler(srv IdentificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BasicRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/identification.v1.Identification/Basic")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Basic(ctx, req.(*BasicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthReply)
		return ctx.Result(200, reply)
	}
}

func _Identification_VerifyToken0_HTTP_Handler(srv IdentificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TokenRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/identification.v1.Identification/VerifyToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyToken(ctx, req.(*TokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TokenInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Identification_WhoAmI0_HTTP_Handler(srv IdentificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/identification.v1.Identification/WhoAmI")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WhoAmI(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TokenInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Identification_StandardizeAccount0_HTTP_Handler(srv IdentificationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StandardizeAccountReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/identification.v1.Identification/StandardizeAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StandardizeAccount(ctx, req.(*StandardizeAccountReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TokenInfoReply)
		return ctx.Result(200, reply)
	}
}

type IdentificationHTTPClient interface {
	Basic(ctx context.Context, req *BasicRequest, opts ...http.CallOption) (rsp *AuthReply, err error)
	StandardizeAccount(ctx context.Context, req *StandardizeAccountReq, opts ...http.CallOption) (rsp *TokenInfoReply, err error)
	VerifyToken(ctx context.Context, req *TokenRequest, opts ...http.CallOption) (rsp *TokenInfoReply, err error)
	WhoAmI(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *TokenInfoReply, err error)
}

type IdentificationHTTPClientImpl struct {
	cc *http.Client
}

func NewIdentificationHTTPClient(client *http.Client) IdentificationHTTPClient {
	return &IdentificationHTTPClientImpl{client}
}

func (c *IdentificationHTTPClientImpl) Basic(ctx context.Context, in *BasicRequest, opts ...http.CallOption) (*AuthReply, error) {
	var out AuthReply
	pattern := "/ident/basic"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/identification.v1.Identification/Basic"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IdentificationHTTPClientImpl) StandardizeAccount(ctx context.Context, in *StandardizeAccountReq, opts ...http.CallOption) (*TokenInfoReply, error) {
	var out TokenInfoReply
	pattern := "/ident/standardize-account"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/identification.v1.Identification/StandardizeAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IdentificationHTTPClientImpl) VerifyToken(ctx context.Context, in *TokenRequest, opts ...http.CallOption) (*TokenInfoReply, error) {
	var out TokenInfoReply
	pattern := "/ident/verify-token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/identification.v1.Identification/VerifyToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IdentificationHTTPClientImpl) WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*TokenInfoReply, error) {
	var out TokenInfoReply
	pattern := "/ident/who-am-i"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/identification.v1.Identification/WhoAmI"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
