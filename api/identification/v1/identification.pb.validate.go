// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/identification/v1/identification.proto

package identv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BasicRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BasicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BasicRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BasicRequestMultiError, or
// nil if none found.
func (m *BasicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BasicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSource()); l < 1 || l > 100 {
		err := BasicRequestValidationError{
			field:  "Source",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetApp()); l < 1 || l > 100 {
		err := BasicRequestValidationError{
			field:  "App",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 100 {
		err := BasicRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPwd()); l < 1 || l > 100 {
		err := BasicRequestValidationError{
			field:  "Pwd",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BasicRequestMultiError(errors)
	}

	return nil
}

// BasicRequestMultiError is an error wrapping multiple validation errors
// returned by BasicRequest.ValidateAll() if the designated constraints aren't met.
type BasicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BasicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BasicRequestMultiError) AllErrors() []error { return m }

// BasicRequestValidationError is the validation error returned by
// BasicRequest.Validate if the designated constraints aren't met.
type BasicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasicRequestValidationError) ErrorName() string { return "BasicRequestValidationError" }

// Error satisfies the builtin error interface
func (e BasicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasicRequestValidationError{}

// Validate checks the field values on AuthReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthReplyMultiError, or nil
// if none found.
func (m *AuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetExpiredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthReplyValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthReplyValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthReplyValidationError{
				field:  "ExpiredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CallbackUrl

	if len(errors) > 0 {
		return AuthReplyMultiError(errors)
	}

	return nil
}

// AuthReplyMultiError is an error wrapping multiple validation errors returned
// by AuthReply.ValidateAll() if the designated constraints aren't met.
type AuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthReplyMultiError) AllErrors() []error { return m }

// AuthReplyValidationError is the validation error returned by
// AuthReply.Validate if the designated constraints aren't met.
type AuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthReplyValidationError) ErrorName() string { return "AuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e AuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthReplyValidationError{}

// Validate checks the field values on TokenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenRequestMultiError, or
// nil if none found.
func (m *TokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetToken()); l < 1 || l > 1000 {
		err := TokenRequestValidationError{
			field:  "Token",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetApp()); l < 1 || l > 100 {
		err := TokenRequestValidationError{
			field:  "App",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TokenRequestMultiError(errors)
	}

	return nil
}

// TokenRequestMultiError is an error wrapping multiple validation errors
// returned by TokenRequest.ValidateAll() if the designated constraints aren't met.
type TokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenRequestMultiError) AllErrors() []error { return m }

// TokenRequestValidationError is the validation error returned by
// TokenRequest.Validate if the designated constraints aren't met.
type TokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRequestValidationError) ErrorName() string { return "TokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e TokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRequestValidationError{}

// Validate checks the field values on TokenInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenInfoReplyMultiError,
// or nil if none found.
func (m *TokenInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for DisplayName

	// no validation rules for Email

	// no validation rules for PhoneNo

	// no validation rules for Retired

	// no validation rules for Gender

	if len(errors) > 0 {
		return TokenInfoReplyMultiError(errors)
	}

	return nil
}

// TokenInfoReplyMultiError is an error wrapping multiple validation errors
// returned by TokenInfoReply.ValidateAll() if the designated constraints
// aren't met.
type TokenInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenInfoReplyMultiError) AllErrors() []error { return m }

// TokenInfoReplyValidationError is the validation error returned by
// TokenInfoReply.Validate if the designated constraints aren't met.
type TokenInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenInfoReplyValidationError) ErrorName() string { return "TokenInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e TokenInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenInfoReplyValidationError{}

// Validate checks the field values on StandardizeAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StandardizeAccountReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StandardizeAccountReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StandardizeAccountReqMultiError, or nil if none found.
func (m *StandardizeAccountReq) ValidateAll() error {
	return m.validate(true)
}

func (m *StandardizeAccountReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSource()); l < 1 || l > 100 {
		err := StandardizeAccountReqValidationError{
			field:  "Source",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 100 {
		err := StandardizeAccountReqValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StandardizeAccountReqMultiError(errors)
	}

	return nil
}

// StandardizeAccountReqMultiError is an error wrapping multiple validation
// errors returned by StandardizeAccountReq.ValidateAll() if the designated
// constraints aren't met.
type StandardizeAccountReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StandardizeAccountReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StandardizeAccountReqMultiError) AllErrors() []error { return m }

// StandardizeAccountReqValidationError is the validation error returned by
// StandardizeAccountReq.Validate if the designated constraints aren't met.
type StandardizeAccountReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StandardizeAccountReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StandardizeAccountReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StandardizeAccountReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StandardizeAccountReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StandardizeAccountReqValidationError) ErrorName() string {
	return "StandardizeAccountReqValidationError"
}

// Error satisfies the builtin error interface
func (e StandardizeAccountReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStandardizeAccountReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StandardizeAccountReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StandardizeAccountReqValidationError{}
