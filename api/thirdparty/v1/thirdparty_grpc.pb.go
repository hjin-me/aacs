// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.1
// source: api/thirdparty/v1/thirdparty.proto

package thirdpartyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThirdPartyClient is the client API for ThirdParty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdPartyClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	Inspect(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*Info, error)
	BindAdmin(ctx context.Context, in *BindAdminRequest, opts ...grpc.CallOption) (*ResultReply, error)
	All(ctx context.Context, in *AllRequest, opts ...grpc.CallOption) (*AllReply, error)
	GrantToken(ctx context.Context, in *GrantTokenReq, opts ...grpc.CallOption) (*GrantTokenReply, error)
}

type thirdPartyClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdPartyClient(cc grpc.ClientConnInterface) ThirdPartyClient {
	return &thirdPartyClient{cc}
}

func (c *thirdPartyClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := c.cc.Invoke(ctx, "/thirdparty.v1.ThirdParty/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyClient) Inspect(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/thirdparty.v1.ThirdParty/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyClient) BindAdmin(ctx context.Context, in *BindAdminRequest, opts ...grpc.CallOption) (*ResultReply, error) {
	out := new(ResultReply)
	err := c.cc.Invoke(ctx, "/thirdparty.v1.ThirdParty/BindAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyClient) All(ctx context.Context, in *AllRequest, opts ...grpc.CallOption) (*AllReply, error) {
	out := new(AllReply)
	err := c.cc.Invoke(ctx, "/thirdparty.v1.ThirdParty/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdPartyClient) GrantToken(ctx context.Context, in *GrantTokenReq, opts ...grpc.CallOption) (*GrantTokenReply, error) {
	out := new(GrantTokenReply)
	err := c.cc.Invoke(ctx, "/thirdparty.v1.ThirdParty/GrantToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdPartyServer is the server API for ThirdParty service.
// All implementations must embed UnimplementedThirdPartyServer
// for forward compatibility
type ThirdPartyServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	Inspect(context.Context, *InfoRequest) (*Info, error)
	BindAdmin(context.Context, *BindAdminRequest) (*ResultReply, error)
	All(context.Context, *AllRequest) (*AllReply, error)
	GrantToken(context.Context, *GrantTokenReq) (*GrantTokenReply, error)
	mustEmbedUnimplementedThirdPartyServer()
}

// UnimplementedThirdPartyServer must be embedded to have forward compatible implementations.
type UnimplementedThirdPartyServer struct {
}

func (UnimplementedThirdPartyServer) Add(context.Context, *AddRequest) (*AddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedThirdPartyServer) Inspect(context.Context, *InfoRequest) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inspect not implemented")
}
func (UnimplementedThirdPartyServer) BindAdmin(context.Context, *BindAdminRequest) (*ResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindAdmin not implemented")
}
func (UnimplementedThirdPartyServer) All(context.Context, *AllRequest) (*AllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedThirdPartyServer) GrantToken(context.Context, *GrantTokenReq) (*GrantTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantToken not implemented")
}
func (UnimplementedThirdPartyServer) mustEmbedUnimplementedThirdPartyServer() {}

// UnsafeThirdPartyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdPartyServer will
// result in compilation errors.
type UnsafeThirdPartyServer interface {
	mustEmbedUnimplementedThirdPartyServer()
}

func RegisterThirdPartyServer(s grpc.ServiceRegistrar, srv ThirdPartyServer) {
	s.RegisterService(&ThirdParty_ServiceDesc, srv)
}

func _ThirdParty_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdparty.v1.ThirdParty/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdParty_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdparty.v1.ThirdParty/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).Inspect(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdParty_BindAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).BindAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdparty.v1.ThirdParty/BindAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).BindAdmin(ctx, req.(*BindAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdParty_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdparty.v1.ThirdParty/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).All(ctx, req.(*AllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdParty_GrantToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdPartyServer).GrantToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thirdparty.v1.ThirdParty/GrantToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdPartyServer).GrantToken(ctx, req.(*GrantTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdParty_ServiceDesc is the grpc.ServiceDesc for ThirdParty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdParty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thirdparty.v1.ThirdParty",
	HandlerType: (*ThirdPartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _ThirdParty_Add_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _ThirdParty_Inspect_Handler,
		},
		{
			MethodName: "BindAdmin",
			Handler:    _ThirdParty_BindAdmin_Handler,
		},
		{
			MethodName: "All",
			Handler:    _ThirdParty_All_Handler,
		},
		{
			MethodName: "GrantToken",
			Handler:    _ThirdParty_GrantToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/thirdparty/v1/thirdparty.proto",
}
