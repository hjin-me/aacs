// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.1

package thirdpartyv1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ThirdPartyHTTPServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	All(context.Context, *AllRequest) (*AllReply, error)
	BindAdmin(context.Context, *BindAdminRequest) (*ResultReply, error)
	GrantToken(context.Context, *GrantTokenReq) (*GrantTokenReply, error)
	Inspect(context.Context, *InfoRequest) (*Info, error)
}

func RegisterThirdPartyHTTPServer(s *http.Server, srv ThirdPartyHTTPServer) {
	r := s.Route("/")
	r.POST("/thirdparty/add", _ThirdParty_Add0_HTTP_Handler(srv))
	r.POST("/thirdparty/inspect", _ThirdParty_Inspect0_HTTP_Handler(srv))
	r.POST("/thirdparty/bind-admin", _ThirdParty_BindAdmin0_HTTP_Handler(srv))
	r.POST("/thirdparty/all", _ThirdParty_All0_HTTP_Handler(srv))
	r.POST("/thirdparty/grant-token", _ThirdParty_GrantToken0_HTTP_Handler(srv))
}

func _ThirdParty_Add0_HTTP_Handler(srv ThirdPartyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/thirdparty.v1.ThirdParty/Add")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddReply)
		return ctx.Result(200, reply)
	}
}

func _ThirdParty_Inspect0_HTTP_Handler(srv ThirdPartyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/thirdparty.v1.ThirdParty/Inspect")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Inspect(ctx, req.(*InfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Info)
		return ctx.Result(200, reply)
	}
}

func _ThirdParty_BindAdmin0_HTTP_Handler(srv ThirdPartyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindAdminRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/thirdparty.v1.ThirdParty/BindAdmin")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BindAdmin(ctx, req.(*BindAdminRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ResultReply)
		return ctx.Result(200, reply)
	}
}

func _ThirdParty_All0_HTTP_Handler(srv ThirdPartyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AllRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/thirdparty.v1.ThirdParty/All")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.All(ctx, req.(*AllRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AllReply)
		return ctx.Result(200, reply)
	}
}

func _ThirdParty_GrantToken0_HTTP_Handler(srv ThirdPartyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GrantTokenReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/thirdparty.v1.ThirdParty/GrantToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrantToken(ctx, req.(*GrantTokenReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantTokenReply)
		return ctx.Result(200, reply)
	}
}

type ThirdPartyHTTPClient interface {
	Add(ctx context.Context, req *AddRequest, opts ...http.CallOption) (rsp *AddReply, err error)
	All(ctx context.Context, req *AllRequest, opts ...http.CallOption) (rsp *AllReply, err error)
	BindAdmin(ctx context.Context, req *BindAdminRequest, opts ...http.CallOption) (rsp *ResultReply, err error)
	GrantToken(ctx context.Context, req *GrantTokenReq, opts ...http.CallOption) (rsp *GrantTokenReply, err error)
	Inspect(ctx context.Context, req *InfoRequest, opts ...http.CallOption) (rsp *Info, err error)
}

type ThirdPartyHTTPClientImpl struct {
	cc *http.Client
}

func NewThirdPartyHTTPClient(client *http.Client) ThirdPartyHTTPClient {
	return &ThirdPartyHTTPClientImpl{client}
}

func (c *ThirdPartyHTTPClientImpl) Add(ctx context.Context, in *AddRequest, opts ...http.CallOption) (*AddReply, error) {
	var out AddReply
	pattern := "/thirdparty/add"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/thirdparty.v1.ThirdParty/Add"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ThirdPartyHTTPClientImpl) All(ctx context.Context, in *AllRequest, opts ...http.CallOption) (*AllReply, error) {
	var out AllReply
	pattern := "/thirdparty/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/thirdparty.v1.ThirdParty/All"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ThirdPartyHTTPClientImpl) BindAdmin(ctx context.Context, in *BindAdminRequest, opts ...http.CallOption) (*ResultReply, error) {
	var out ResultReply
	pattern := "/thirdparty/bind-admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/thirdparty.v1.ThirdParty/BindAdmin"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ThirdPartyHTTPClientImpl) GrantToken(ctx context.Context, in *GrantTokenReq, opts ...http.CallOption) (*GrantTokenReply, error) {
	var out GrantTokenReply
	pattern := "/thirdparty/grant-token"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/thirdparty.v1.ThirdParty/GrantToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ThirdPartyHTTPClientImpl) Inspect(ctx context.Context, in *InfoRequest, opts ...http.CallOption) (*Info, error) {
	var out Info
	pattern := "/thirdparty/inspect"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/thirdparty.v1.ThirdParty/Inspect"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
