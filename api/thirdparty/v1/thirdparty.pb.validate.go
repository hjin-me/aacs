// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/thirdparty/v1/thirdparty.proto

package thirdpartyv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Info with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Info) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Info with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InfoMultiError, or nil if none found.
func (m *Info) ValidateAll() error {
	return m.validate(true)
}

func (m *Info) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CallbackUrl

	// no validation rules for KeyValidityPeriod

	// no validation rules for AutoLogin

	// no validation rules for Secret

	// no validation rules for DevMode

	if len(errors) > 0 {
		return InfoMultiError(errors)
	}

	return nil
}

// InfoMultiError is an error wrapping multiple validation errors returned by
// Info.ValidateAll() if the designated constraints aren't met.
type InfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoMultiError) AllErrors() []error { return m }

// InfoValidationError is the validation error returned by Info.Validate if the
// designated constraints aren't met.
type InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoValidationError) ErrorName() string { return "InfoValidationError" }

// Error satisfies the builtin error interface
func (e InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoValidationError{}

// Validate checks the field values on AddRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddRequestMultiError, or
// nil if none found.
func (m *AddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 100 {
		err := AddRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := AddRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetOwner()); l < 1 || l > 50 {
		err := AddRequestValidationError{
			field:  "Owner",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCallbackUrl()); l < 1 || l > 200 {
		err := AddRequestValidationError{
			field:  "CallbackUrl",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AutoLogin

	if len(errors) > 0 {
		return AddRequestMultiError(errors)
	}

	return nil
}

// AddRequestMultiError is an error wrapping multiple validation errors
// returned by AddRequest.ValidateAll() if the designated constraints aren't met.
type AddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddRequestMultiError) AllErrors() []error { return m }

// AddRequestValidationError is the validation error returned by
// AddRequest.Validate if the designated constraints aren't met.
type AddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddRequestValidationError) ErrorName() string { return "AddRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddRequestValidationError{}

// Validate checks the field values on AddReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddReplyMultiError, or nil
// if none found.
func (m *AddReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AddReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddReplyValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddReplyValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddReplyMultiError(errors)
	}

	return nil
}

// AddReplyMultiError is an error wrapping multiple validation errors returned
// by AddReply.ValidateAll() if the designated constraints aren't met.
type AddReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddReplyMultiError) AllErrors() []error { return m }

// AddReplyValidationError is the validation error returned by
// AddReply.Validate if the designated constraints aren't met.
type AddReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddReplyValidationError) ErrorName() string { return "AddReplyValidationError" }

// Error satisfies the builtin error interface
func (e AddReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddReplyValidationError{}

// Validate checks the field values on BindAdminRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BindAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindAdminRequestMultiError, or nil if none found.
func (m *BindAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BindAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 100 {
		err := BindAdminRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 50 {
		err := BindAdminRequestValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BindAdminRequestMultiError(errors)
	}

	return nil
}

// BindAdminRequestMultiError is an error wrapping multiple validation errors
// returned by BindAdminRequest.ValidateAll() if the designated constraints
// aren't met.
type BindAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindAdminRequestMultiError) AllErrors() []error { return m }

// BindAdminRequestValidationError is the validation error returned by
// BindAdminRequest.Validate if the designated constraints aren't met.
type BindAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindAdminRequestValidationError) ErrorName() string { return "BindAdminRequestValidationError" }

// Error satisfies the builtin error interface
func (e BindAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindAdminRequestValidationError{}

// Validate checks the field values on AllRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllRequestMultiError, or
// nil if none found.
func (m *AllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AllRequestMultiError(errors)
	}

	return nil
}

// AllRequestMultiError is an error wrapping multiple validation errors
// returned by AllRequest.ValidateAll() if the designated constraints aren't met.
type AllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllRequestMultiError) AllErrors() []error { return m }

// AllRequestValidationError is the validation error returned by
// AllRequest.Validate if the designated constraints aren't met.
type AllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllRequestValidationError) ErrorName() string { return "AllRequestValidationError" }

// Error satisfies the builtin error interface
func (e AllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllRequestValidationError{}

// Validate checks the field values on AllReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllReplyMultiError, or nil
// if none found.
func (m *AllReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AllReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllReplyMultiError(errors)
	}

	return nil
}

// AllReplyMultiError is an error wrapping multiple validation errors returned
// by AllReply.ValidateAll() if the designated constraints aren't met.
type AllReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllReplyMultiError) AllErrors() []error { return m }

// AllReplyValidationError is the validation error returned by
// AllReply.Validate if the designated constraints aren't met.
type AllReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllReplyValidationError) ErrorName() string { return "AllReplyValidationError" }

// Error satisfies the builtin error interface
func (e AllReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllReplyValidationError{}

// Validate checks the field values on InfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InfoRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfoRequestMultiError, or
// nil if none found.
func (m *InfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return InfoRequestMultiError(errors)
	}

	return nil
}

// InfoRequestMultiError is an error wrapping multiple validation errors
// returned by InfoRequest.ValidateAll() if the designated constraints aren't met.
type InfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfoRequestMultiError) AllErrors() []error { return m }

// InfoRequestValidationError is the validation error returned by
// InfoRequest.Validate if the designated constraints aren't met.
type InfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoRequestValidationError) ErrorName() string { return "InfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e InfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoRequestValidationError{}

// Validate checks the field values on ResultReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResultReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResultReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResultReplyMultiError, or
// nil if none found.
func (m *ResultReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ResultReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	if len(errors) > 0 {
		return ResultReplyMultiError(errors)
	}

	return nil
}

// ResultReplyMultiError is an error wrapping multiple validation errors
// returned by ResultReply.ValidateAll() if the designated constraints aren't met.
type ResultReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResultReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResultReplyMultiError) AllErrors() []error { return m }

// ResultReplyValidationError is the validation error returned by
// ResultReply.Validate if the designated constraints aren't met.
type ResultReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResultReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResultReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResultReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResultReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResultReplyValidationError) ErrorName() string { return "ResultReplyValidationError" }

// Error satisfies the builtin error interface
func (e ResultReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResultReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResultReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResultReplyValidationError{}

// Validate checks the field values on ServiceTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceTokenReplyMultiError, or nil if none found.
func (m *ServiceTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return ServiceTokenReplyMultiError(errors)
	}

	return nil
}

// ServiceTokenReplyMultiError is an error wrapping multiple validation errors
// returned by ServiceTokenReply.ValidateAll() if the designated constraints
// aren't met.
type ServiceTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceTokenReplyMultiError) AllErrors() []error { return m }

// ServiceTokenReplyValidationError is the validation error returned by
// ServiceTokenReply.Validate if the designated constraints aren't met.
type ServiceTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceTokenReplyValidationError) ErrorName() string {
	return "ServiceTokenReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceTokenReplyValidationError{}

// Validate checks the field values on GrantTokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GrantTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GrantTokenReqMultiError, or
// nil if none found.
func (m *GrantTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 100 {
		err := GrantTokenReqValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPeriodOfValidity(); val <= 30 || val >= 31536000 {
		err := GrantTokenReqValidationError{
			field:  "PeriodOfValidity",
			reason: "value must be inside range (30, 31536000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GrantTokenReqMultiError(errors)
	}

	return nil
}

// GrantTokenReqMultiError is an error wrapping multiple validation errors
// returned by GrantTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GrantTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantTokenReqMultiError) AllErrors() []error { return m }

// GrantTokenReqValidationError is the validation error returned by
// GrantTokenReq.Validate if the designated constraints aren't met.
type GrantTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantTokenReqValidationError) ErrorName() string { return "GrantTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GrantTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantTokenReqValidationError{}

// Validate checks the field values on GrantTokenReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GrantTokenReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantTokenReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantTokenReplyMultiError, or nil if none found.
func (m *GrantTokenReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantTokenReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetExpiredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantTokenReplyValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantTokenReplyValidationError{
					field:  "ExpiredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantTokenReplyValidationError{
				field:  "ExpiredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantTokenReplyMultiError(errors)
	}

	return nil
}

// GrantTokenReplyMultiError is an error wrapping multiple validation errors
// returned by GrantTokenReply.ValidateAll() if the designated constraints
// aren't met.
type GrantTokenReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantTokenReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantTokenReplyMultiError) AllErrors() []error { return m }

// GrantTokenReplyValidationError is the validation error returned by
// GrantTokenReply.Validate if the designated constraints aren't met.
type GrantTokenReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantTokenReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantTokenReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantTokenReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantTokenReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantTokenReplyValidationError) ErrorName() string { return "GrantTokenReplyValidationError" }

// Error satisfies the builtin error interface
func (e GrantTokenReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantTokenReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantTokenReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantTokenReplyValidationError{}
