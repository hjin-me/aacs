// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/openidprovider/v1/openidprovider.proto

package openidproviderv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SubjectMultiError, or nil if none found.
func (m *Subject) ValidateAll() error {
	return m.validate(true)
}

func (m *Subject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for DisplayName

	// no validation rules for Email

	// no validation rules for PhoneNo

	// no validation rules for Source

	// no validation rules for App

	// no validation rules for Retired

	// no validation rules for Gender

	if len(errors) > 0 {
		return SubjectMultiError(errors)
	}

	return nil
}

// SubjectMultiError is an error wrapping multiple validation errors returned
// by Subject.ValidateAll() if the designated constraints aren't met.
type SubjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubjectMultiError) AllErrors() []error { return m }

// SubjectValidationError is the validation error returned by Subject.Validate
// if the designated constraints aren't met.
type SubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectValidationError) ErrorName() string { return "SubjectValidationError" }

// Error satisfies the builtin error interface
func (e SubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectValidationError{}

// Validate checks the field values on NameReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NameReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NameReplyMultiError, or nil
// if none found.
func (m *NameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *NameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return NameReplyMultiError(errors)
	}

	return nil
}

// NameReplyMultiError is an error wrapping multiple validation errors returned
// by NameReply.ValidateAll() if the designated constraints aren't met.
type NameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NameReplyMultiError) AllErrors() []error { return m }

// NameReplyValidationError is the validation error returned by
// NameReply.Validate if the designated constraints aren't met.
type NameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NameReplyValidationError) ErrorName() string { return "NameReplyValidationError" }

// Error satisfies the builtin error interface
func (e NameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NameReplyValidationError{}

// Validate checks the field values on BasicAuthReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BasicAuthReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BasicAuthReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BasicAuthReqMultiError, or
// nil if none found.
func (m *BasicAuthReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BasicAuthReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 100 {
		err := BasicAuthReqValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPwd()); l < 1 || l > 100 {
		err := BasicAuthReqValidationError{
			field:  "Pwd",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BasicAuthReqMultiError(errors)
	}

	return nil
}

// BasicAuthReqMultiError is an error wrapping multiple validation errors
// returned by BasicAuthReq.ValidateAll() if the designated constraints aren't met.
type BasicAuthReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BasicAuthReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BasicAuthReqMultiError) AllErrors() []error { return m }

// BasicAuthReqValidationError is the validation error returned by
// BasicAuthReq.Validate if the designated constraints aren't met.
type BasicAuthReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasicAuthReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasicAuthReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasicAuthReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasicAuthReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasicAuthReqValidationError) ErrorName() string { return "BasicAuthReqValidationError" }

// Error satisfies the builtin error interface
func (e BasicAuthReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasicAuthReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasicAuthReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasicAuthReqValidationError{}

// Validate checks the field values on BasicAuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BasicAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BasicAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BasicAuthReplyMultiError,
// or nil if none found.
func (m *BasicAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BasicAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSub()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BasicAuthReplyValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BasicAuthReplyValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSub()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BasicAuthReplyValidationError{
				field:  "Sub",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BasicAuthReplyMultiError(errors)
	}

	return nil
}

// BasicAuthReplyMultiError is an error wrapping multiple validation errors
// returned by BasicAuthReply.ValidateAll() if the designated constraints
// aren't met.
type BasicAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BasicAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BasicAuthReplyMultiError) AllErrors() []error { return m }

// BasicAuthReplyValidationError is the validation error returned by
// BasicAuthReply.Validate if the designated constraints aren't met.
type BasicAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasicAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasicAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasicAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasicAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasicAuthReplyValidationError) ErrorName() string { return "BasicAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e BasicAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasicAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasicAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasicAuthReplyValidationError{}

// Validate checks the field values on TokenAuthReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenAuthReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenAuthReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenAuthReqMultiError, or
// nil if none found.
func (m *TokenAuthReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenAuthReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetToken()); l < 1 || l > 1000 {
		err := TokenAuthReqValidationError{
			field:  "Token",
			reason: "value length must be between 1 and 1000 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TokenAuthReqMultiError(errors)
	}

	return nil
}

// TokenAuthReqMultiError is an error wrapping multiple validation errors
// returned by TokenAuthReq.ValidateAll() if the designated constraints aren't met.
type TokenAuthReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenAuthReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenAuthReqMultiError) AllErrors() []error { return m }

// TokenAuthReqValidationError is the validation error returned by
// TokenAuthReq.Validate if the designated constraints aren't met.
type TokenAuthReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenAuthReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenAuthReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenAuthReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenAuthReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenAuthReqValidationError) ErrorName() string { return "TokenAuthReqValidationError" }

// Error satisfies the builtin error interface
func (e TokenAuthReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenAuthReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenAuthReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenAuthReqValidationError{}

// Validate checks the field values on TokenAuthReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenAuthReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenAuthReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenAuthReplyMultiError,
// or nil if none found.
func (m *TokenAuthReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenAuthReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSub()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TokenAuthReplyValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TokenAuthReplyValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSub()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TokenAuthReplyValidationError{
				field:  "Sub",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Uid

	if len(errors) > 0 {
		return TokenAuthReplyMultiError(errors)
	}

	return nil
}

// TokenAuthReplyMultiError is an error wrapping multiple validation errors
// returned by TokenAuthReply.ValidateAll() if the designated constraints
// aren't met.
type TokenAuthReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenAuthReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenAuthReplyMultiError) AllErrors() []error { return m }

// TokenAuthReplyValidationError is the validation error returned by
// TokenAuthReply.Validate if the designated constraints aren't met.
type TokenAuthReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenAuthReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenAuthReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenAuthReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenAuthReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenAuthReplyValidationError) ErrorName() string { return "TokenAuthReplyValidationError" }

// Error satisfies the builtin error interface
func (e TokenAuthReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenAuthReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenAuthReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenAuthReplyValidationError{}

// Validate checks the field values on SearchUidReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchUidReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUidReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchUidReqMultiError, or
// nil if none found.
func (m *SearchUidReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUidReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUid()); l < 1 || l > 100 {
		err := SearchUidReqValidationError{
			field:  "Uid",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SearchUidReqMultiError(errors)
	}

	return nil
}

// SearchUidReqMultiError is an error wrapping multiple validation errors
// returned by SearchUidReq.ValidateAll() if the designated constraints aren't met.
type SearchUidReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUidReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUidReqMultiError) AllErrors() []error { return m }

// SearchUidReqValidationError is the validation error returned by
// SearchUidReq.Validate if the designated constraints aren't met.
type SearchUidReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUidReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUidReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUidReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUidReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUidReqValidationError) ErrorName() string { return "SearchUidReqValidationError" }

// Error satisfies the builtin error interface
func (e SearchUidReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUidReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUidReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUidReqValidationError{}

// Validate checks the field values on SearchUidReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SearchUidReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUidReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SearchUidReplyMultiError,
// or nil if none found.
func (m *SearchUidReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUidReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSub()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchUidReplyValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchUidReplyValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSub()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchUidReplyValidationError{
				field:  "Sub",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchUidReplyMultiError(errors)
	}

	return nil
}

// SearchUidReplyMultiError is an error wrapping multiple validation errors
// returned by SearchUidReply.ValidateAll() if the designated constraints
// aren't met.
type SearchUidReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUidReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUidReplyMultiError) AllErrors() []error { return m }

// SearchUidReplyValidationError is the validation error returned by
// SearchUidReply.Validate if the designated constraints aren't met.
type SearchUidReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUidReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUidReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUidReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUidReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUidReplyValidationError) ErrorName() string { return "SearchUidReplyValidationError" }

// Error satisfies the builtin error interface
func (e SearchUidReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUidReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUidReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUidReplyValidationError{}
